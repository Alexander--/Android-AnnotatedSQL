/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the AnnotatedSQL library.
  */
package ${pkgName};

<#list imports as import>
import ${import};	 
</#list> 
		
import android.content.ContentProvider;
import android.content.ContentResolver;
import android.content.ContentValues;
import android.content.Context;
import android.content.UriMatcher;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.database.sqlite.SQLiteQueryBuilder;
import android.net.Uri;

public class ${className} extends ContentProvider{

	public static final String AUTHORITY = "${authority}";

	private final static int MATCH_TYPE_ITEM = 0x0001;
	private final static int MATCH_TYPE_DIR = 0x0002;
	private final static int MATCH_TYPE_MASK = 0x000f;
	
	private static final UriMatcher matcher = new UriMatcher(UriMatcher.NO_MATCH);

	static {
		<#list entities as e>
		matcher.addURI(AUTHORITY, ${e.path}, ${e.codeHex}); 
		</#list> 
	}
	
	private SQLiteOpenHelper db;
	private ContentResolver contentResolver;

	@Override
	public boolean onCreate() {
		final Context context = getContext();
		db = new AnnotationSql(context);
		contentResolver = context.getContentResolver();
		return true;
	}
	
	@Override
	public String getType(Uri uri) {
		final String type;
		switch (matcher.match(uri) & MATCH_TYPE_MASK) {
			case MATCH_TYPE_ITEM:
				type = ContentResolver.CURSOR_ITEM_BASE_TYPE + "/vnd." + AUTHORITY + ".item";
				break;
			case MATCH_TYPE_DIR:
				type = ContentResolver.CURSOR_DIR_BASE_TYPE + "/vnd." + AUTHORITY + ".dir";
				break;
			default:
				throw new IllegalArgumentException("Unsupported uri " + uri);
			}
		return type;
	}

	@Override
	public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {
		final SQLiteQueryBuilder query = new SQLiteQueryBuilder();
		String groupBy = null;
		switch (matcher.match(uri)) {
			<#list entities as e>
			case ${e.codeHex}:{
				query.setTables(${e.tableLink});
				<#if e.item>
				query.appendWhere("${e.selectColumn} = " + uri.getLastPathSegment());
				</#if>
				break;
			}
			</#list> 
		}
		Cursor c = query.query(db.getReadableDatabase(),
        		projection, selection, selectionArgs,
        		groupBy, null, sortOrder, null);
		c.setNotificationUri(getContext().getContentResolver(), uri);
		
		return c;
	}

	@Override
	public Uri insert(Uri uri, ContentValues values) {
		return null;
	}
	
	@Override
	public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {
		return 0;
	}
	
	@Override
	public int delete(Uri uri, String selection, String[] selectionArgs) {
		return 0;
	}
	
	private class AnnotationSql extends SQLiteOpenHelper {

		public AnnotationSql(Context context) {
			super(context, FStore.DB_NAME, null, FStore.DB_VERSION);
		}

		@Override
		public void onCreate(SQLiteDatabase db) {
			${schemaClassName}.onCreate(db);
		}

		@Override
		public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
			${schemaClassName}.onDrop(db);
			onCreate(db);
		}

	}

}